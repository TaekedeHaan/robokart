function lambda = get_forces_system(t, y, force, torque)
par = load_param();
[La, Lb, L, ma, mb, m, Ia, Ib, I, b] = unfold_param(par);
%unpack y
[x, y, phi, alpha, xd, yd, phid, alphad] = unfold_y(y);
lambda = [
                                                                                      -(2*I*force*sin(alpha) + 2*Ib*force*sin(alpha) + I*b*yd*cos(alpha + phi) + Ib*b*yd*cos(alpha + phi) - I*b*xd*sin(alpha + phi) - Ib*b*xd*sin(alpha + phi) - I*b*yd*cos(alpha - phi) - Ib*b*yd*cos(alpha - phi) - I*b*xd*sin(alpha - phi) - Ib*b*xd*sin(alpha - phi) + 2*Lb^2*force*m*sin(alpha) + 2*La^2*force*ma*sin(alpha) + 2*Lb^2*force*ma*sin(alpha) + I*m*phid*yd*sin(alpha - phi) + Ib*m*phid*yd*sin(alpha - phi) + I*ma*phid*yd*sin(alpha - phi) + I*mb*phid*yd*sin(alpha - phi) + Ib*ma*phid*yd*sin(alpha - phi) + Ib*mb*phid*yd*sin(alpha - phi) + 2*Lb^2*alphad*m^2*xd*cos(alpha + phi) + 2*La^2*alphad*ma^2*xd*cos(alpha + phi) + 2*Lb^2*alphad*ma^2*xd*cos(alpha + phi) - La^2*b*ma*yd*cos(alpha - phi) + Lb^2*b*mb*yd*cos(alpha - phi) + 2*Lb^2*m^2*phid*xd*cos(alpha + phi) + 2*La^2*ma^2*phid*xd*cos(alpha + phi) + 2*Lb^2*ma^2*phid*xd*cos(alpha + phi) - La^2*b*ma*xd*sin(alpha - phi) + Lb^2*b*mb*xd*sin(alpha - phi) + 2*Lb^2*alphad*m^2*yd*sin(alpha + phi) + 2*La^2*alphad*ma^2*yd*sin(alpha + phi) + 2*Lb^2*alphad*ma^2*yd*sin(alpha + phi) + 2*Lb^2*m^2*phid*yd*sin(alpha + phi) + 2*La^2*ma^2*phid*yd*sin(alpha + phi) + 2*Lb^2*ma^2*phid*yd*sin(alpha + phi) + 2*La^3*alphad*ma^2*phid*sin(alpha) + 2*I*alphad*m*xd*cos(alpha + phi) + 2*Ib*alphad*m*xd*cos(alpha + phi) + 2*I*alphad*ma*xd*cos(alpha + phi) + 2*I*alphad*mb*xd*cos(alpha + phi) + 2*Ib*alphad*ma*xd*cos(alpha + phi) + 2*Ib*alphad*mb*xd*cos(alpha + phi) + I*m*phid*xd*cos(alpha + phi) + Ib*m*phid*xd*cos(alpha + phi) + I*ma*phid*xd*cos(alpha + phi) + I*mb*phid*xd*cos(alpha + phi) + Ib*ma*phid*xd*cos(alpha + phi) + Ib*mb*phid*xd*cos(alpha + phi) + 2*I*alphad*m*yd*sin(alpha + phi) + 2*Ib*alphad*m*yd*sin(alpha + phi) + 2*I*alphad*ma*yd*sin(alpha + phi) + 2*I*alphad*mb*yd*sin(alpha + phi) + 2*Ib*alphad*ma*yd*sin(alpha + phi) + 2*Ib*alphad*mb*yd*sin(alpha + phi) + 4*La*Lb*force*ma*sin(alpha) + I*m*phid*yd*sin(alpha + phi) + Ib*m*phid*yd*sin(alpha + phi) + I*ma*phid*yd*sin(alpha + phi) + I*mb*phid*yd*sin(alpha + phi) + Ib*ma*phid*yd*sin(alpha + phi) + Ib*mb*phid*yd*sin(alpha + phi) + 2*Lb^2*b*m*yd*cos(alpha + phi) + La^2*b*ma*yd*cos(alpha + phi) + 2*Lb^2*b*ma*yd*cos(alpha + phi) + Lb^2*b*mb*yd*cos(alpha + phi) - I*m*phid*xd*cos(alpha - phi) - Ib*m*phid*xd*cos(alpha - phi) - I*ma*phid*xd*cos(alpha - phi) - I*mb*phid*xd*cos(alpha - phi) - Ib*ma*phid*xd*cos(alpha - phi) - Ib*mb*phid*xd*cos(alpha - phi) - 2*Lb^2*b*m*xd*sin(alpha + phi) - La^2*b*ma*xd*sin(alpha + phi) - 2*Lb^2*b*ma*xd*sin(alpha + phi) - Lb^2*b*mb*xd*sin(alpha + phi) + 2*I*La*alphad*m*phid*sin(alpha) + 2*Ib*La*alphad*m*phid*sin(alpha) + 2*I*La*alphad*ma*phid*sin(alpha) + 2*I*La*alphad*mb*phid*sin(alpha) + 2*Ib*La*alphad*ma*phid*sin(alpha) + 2*Ib*La*alphad*mb*phid*sin(alpha) + 4*La*Lb*alphad*ma^2*xd*cos(alpha + phi) + La*Lb*b*m*yd*cos(alpha - phi) - La*Lb*b*ma*yd*cos(alpha - phi) + La*Lb*b*mb*yd*cos(alpha - phi) + La*Lb*m^2*phid*xd*cos(alpha + phi) + 4*La*Lb*ma^2*phid*xd*cos(alpha + phi) + La*Lb*b*m*xd*sin(alpha - phi) - La*Lb*b*ma*xd*sin(alpha - phi) + La*Lb*b*mb*xd*sin(alpha - phi) + 4*La*Lb*alphad*ma^2*yd*sin(alpha + phi) + La*Lb*m^2*phid*yd*sin(alpha + phi) + 4*La*Lb*ma^2*phid*yd*sin(alpha + phi) + 2*La^2*alphad*m*ma*xd*cos(alpha + phi) + 4*Lb^2*alphad*m*ma*xd*cos(alpha + phi) + 2*Lb^2*alphad*m*mb*xd*cos(alpha + phi) + 2*La^2*alphad*ma*mb*xd*cos(alpha + phi) + 2*Lb^2*alphad*ma*mb*xd*cos(alpha + phi) + 2*La^2*m*ma*phid*xd*cos(alpha + phi) + 4*Lb^2*m*ma*phid*xd*cos(alpha + phi) + 2*Lb^2*m*mb*phid*xd*cos(alpha + phi) + 2*La^2*ma*mb*phid*xd*cos(alpha + phi) + 2*Lb^2*ma*mb*phid*xd*cos(alpha + phi) + 2*La^2*alphad*m*ma*yd*sin(alpha + phi) + 4*Lb^2*alphad*m*ma*yd*sin(alpha + phi) + 2*Lb^2*alphad*m*mb*yd*sin(alpha + phi) + 2*La^2*alphad*ma*mb*yd*sin(alpha + phi) + 2*Lb^2*alphad*ma*mb*yd*sin(alpha + phi) + 2*La^2*m*ma*phid*yd*sin(alpha + phi) + 4*Lb^2*m*ma*phid*yd*sin(alpha + phi) + 2*Lb^2*m*mb*phid*yd*sin(alpha + phi) + 2*La^2*ma*mb*phid*yd*sin(alpha + phi) + 2*Lb^2*ma*mb*phid*yd*sin(alpha + phi) + 2*La^3*alphad*m*ma*phid*sin(alpha) + 2*La^3*alphad*ma*mb*phid*sin(alpha) + La*Lb*m^2*phid*xd*cos(alpha - phi) - La*Lb*m^2*phid*yd*sin(alpha - phi) + 2*La*Lb^2*alphad*m^2*phid*sin(alpha) + 2*La*Lb^2*alphad*ma^2*phid*sin(alpha) + 4*La^2*Lb*alphad*ma^2*phid*sin(alpha) + La*Lb*b*m*yd*cos(alpha + phi) + 3*La*Lb*b*ma*yd*cos(alpha + phi) + La*Lb*b*mb*yd*cos(alpha + phi) - La*Lb*b*m*xd*sin(alpha + phi) - 3*La*Lb*b*ma*xd*sin(alpha + phi) - La*Lb*b*mb*xd*sin(alpha + phi) + 4*La*Lb*alphad*m*ma*xd*cos(alpha + phi) + 4*La*Lb*alphad*ma*mb*xd*cos(alpha + phi) + 5*La*Lb*m*ma*phid*xd*cos(alpha + phi) + La*Lb*m*mb*phid*xd*cos(alpha + phi) + 4*La*Lb*ma*mb*phid*xd*cos(alpha + phi) + 4*La*Lb*alphad*m*ma*yd*sin(alpha + phi) + 4*La*Lb*alphad*ma*mb*yd*sin(alpha + phi) + 5*La*Lb*m*ma*phid*yd*sin(alpha + phi) + La*Lb*m*mb*phid*yd*sin(alpha + phi) + 4*La*Lb*ma*mb*phid*yd*sin(alpha + phi) + La*Lb*m*ma*phid*xd*cos(alpha - phi) + La*Lb*m*mb*phid*xd*cos(alpha - phi) - La*Lb*m*ma*phid*yd*sin(alpha - phi) - La*Lb*m*mb*phid*yd*sin(alpha - phi) + 4*La*Lb^2*alphad*m*ma*phid*sin(alpha) + 4*La^2*Lb*alphad*m*ma*phid*sin(alpha) + 2*La*Lb^2*alphad*m*mb*phid*sin(alpha) + 2*La*Lb^2*alphad*ma*mb*phid*sin(alpha) + 4*La^2*Lb*alphad*ma*mb*phid*sin(alpha))/(I + Ib + La^2*m + 2*Lb^2*m + 2*La^2*ma + La^2*mb + 2*Lb^2*ma + Lb^2*mb - I*cos(2*alpha) - Ib*cos(2*alpha) + 2*La*Lb*m + 4*La*Lb*ma + 2*La*Lb*mb + La^2*m*cos(2*alpha) + La^2*mb*cos(2*alpha) + Lb^2*mb*cos(2*alpha) + 2*La*Lb*m*cos(2*alpha) + 2*La*Lb*mb*cos(2*alpha))
 -(I*b*yd*cos(phi) - Ib*force*sin(2*alpha) - I*force*sin(2*alpha) + Ib*b*yd*cos(phi) - I*b*xd*sin(phi) - Ib*b*xd*sin(phi) - I*b*yd*cos(2*alpha + phi) - Ib*b*yd*cos(2*alpha + phi) + I*b*xd*sin(2*alpha + phi) + Ib*b*xd*sin(2*alpha + phi) - I*m*phid*yd*sin(2*alpha + phi) - Ib*m*phid*yd*sin(2*alpha + phi) - I*ma*phid*yd*sin(2*alpha + phi) - I*mb*phid*yd*sin(2*alpha + phi) - Ib*ma*phid*yd*sin(2*alpha + phi) - Ib*mb*phid*yd*sin(2*alpha + phi) + (La^2*m^2*phid*xd*cos(2*alpha - phi))/2 + (La^2*mb^2*phid*xd*cos(2*alpha - phi))/2 + (Lb^2*mb^2*phid*xd*cos(2*alpha - phi))/2 - (La^2*m^2*phid*yd*sin(2*alpha - phi))/2 - (La^2*mb^2*phid*yd*sin(2*alpha - phi))/2 - (Lb^2*mb^2*phid*yd*sin(2*alpha - phi))/2 + La^2*b*m*yd*cos(phi) + 2*La^2*b*ma*yd*cos(phi) + La^2*b*mb*yd*cos(phi) - La^2*b*m*xd*sin(phi) - 2*La^2*b*ma*xd*sin(phi) - La^2*b*mb*xd*sin(phi) + (La^2*b*m*yd*cos(2*alpha + phi))/2 + (La^2*b*mb*yd*cos(2*alpha + phi))/2 - (La^2*b*m*xd*sin(2*alpha + phi))/2 - (La^2*b*mb*xd*sin(2*alpha + phi))/2 + La^2*m^2*phid*xd*cos(phi) + La^2*mb^2*phid*xd*cos(phi) + Lb^2*mb^2*phid*xd*cos(phi) + La^2*m^2*phid*yd*sin(phi) + La^2*mb^2*phid*yd*sin(phi) + Lb^2*mb^2*phid*yd*sin(phi) + (La^2*b*m*yd*cos(2*alpha - phi))/2 + (La^2*b*mb*yd*cos(2*alpha - phi))/2 + (La^2*m^2*phid*xd*cos(2*alpha + phi))/2 + (La^2*mb^2*phid*xd*cos(2*alpha + phi))/2 + (Lb^2*mb^2*phid*xd*cos(2*alpha + phi))/2 + (La^2*b*m*xd*sin(2*alpha - phi))/2 + (La^2*b*mb*xd*sin(2*alpha - phi))/2 - I*alphad*m*xd*cos(phi) - Ib*alphad*m*xd*cos(phi) - I*alphad*ma*xd*cos(phi) - I*alphad*mb*xd*cos(phi) - Ib*alphad*ma*xd*cos(phi) - Ib*alphad*mb*xd*cos(phi) + (La^2*m^2*phid*yd*sin(2*alpha + phi))/2 + (La^2*mb^2*phid*yd*sin(2*alpha + phi))/2 + (Lb^2*mb^2*phid*yd*sin(2*alpha + phi))/2 + I*m*phid*xd*cos(phi) + Ib*m*phid*xd*cos(phi) + I*ma*phid*xd*cos(phi) + I*mb*phid*xd*cos(phi) + Ib*ma*phid*xd*cos(phi) + Ib*mb*phid*xd*cos(phi) - I*alphad*m*yd*sin(phi) - Ib*alphad*m*yd*sin(phi) - I*alphad*ma*yd*sin(phi) - I*alphad*mb*yd*sin(phi) - Ib*alphad*ma*yd*sin(phi) - Ib*alphad*mb*yd*sin(phi) + I*m*phid*yd*sin(phi) + Ib*m*phid*yd*sin(phi) - I*alphad*m*xd*cos(2*alpha + phi) - Ib*alphad*m*xd*cos(2*alpha + phi) + I*ma*phid*yd*sin(phi) + I*mb*phid*yd*sin(phi) + Ib*ma*phid*yd*sin(phi) + Ib*mb*phid*yd*sin(phi) - I*alphad*ma*xd*cos(2*alpha + phi) - I*alphad*mb*xd*cos(2*alpha + phi) - Ib*alphad*ma*xd*cos(2*alpha + phi) - Ib*alphad*mb*xd*cos(2*alpha + phi) - I*m*phid*xd*cos(2*alpha + phi) - Ib*m*phid*xd*cos(2*alpha + phi) - I*ma*phid*xd*cos(2*alpha + phi) - I*mb*phid*xd*cos(2*alpha + phi) - Ib*ma*phid*xd*cos(2*alpha + phi) - Ib*mb*phid*xd*cos(2*alpha + phi) - I*alphad*m*yd*sin(2*alpha + phi) - Ib*alphad*m*yd*sin(2*alpha + phi) - I*alphad*ma*yd*sin(2*alpha + phi) - I*alphad*mb*yd*sin(2*alpha + phi) - Ib*alphad*ma*yd*sin(2*alpha + phi) - Ib*alphad*mb*yd*sin(2*alpha + phi) + La*Lb*force*m*sin(2*alpha) + La*Lb*mb^2*phid*xd*cos(2*alpha - phi) - La*Lb*mb^2*phid*yd*sin(2*alpha - phi) + La*Lb*b*m*yd*cos(phi) + 2*La*Lb*b*ma*yd*cos(phi) + La*Lb*b*mb*yd*cos(phi) + La^2*m*mb*phid*xd*cos(2*alpha - phi) - La*Lb*b*m*xd*sin(phi) - 2*La*Lb*b*ma*xd*sin(phi) - La*Lb*b*mb*xd*sin(phi) + La^2*Lb*alphad*m^2*phid*sin(2*alpha) - La^2*m*mb*phid*yd*sin(2*alpha - phi) + La*Lb*b*m*yd*cos(2*alpha + phi) + (La*Lb*b*mb*yd*cos(2*alpha + phi))/2 - La*Lb*b*m*xd*sin(2*alpha + phi) - (La*Lb*b*mb*xd*sin(2*alpha + phi))/2 - I*La*alphad*m*phid*sin(2*alpha) - Ib*La*alphad*m*phid*sin(2*alpha) - I*La*alphad*ma*phid*sin(2*alpha) - I*La*alphad*mb*phid*sin(2*alpha) - Ib*La*alphad*ma*phid*sin(2*alpha) - Ib*La*alphad*mb*phid*sin(2*alpha) + La*Lb*alphad*m^2*xd*cos(phi) + La*Lb*m^2*phid*xd*cos(phi) + 2*La*Lb*mb^2*phid*xd*cos(phi) + La*Lb*alphad*m^2*yd*sin(phi) + La*Lb*m^2*phid*yd*sin(phi) + La*Lb*alphad*m^2*xd*cos(2*alpha + phi) + 2*La*Lb*mb^2*phid*yd*sin(phi) + (La*Lb*b*mb*yd*cos(2*alpha - phi))/2 + La*Lb*m^2*phid*xd*cos(2*alpha + phi) + La*Lb*mb^2*phid*xd*cos(2*alpha + phi) + 2*La^2*m*ma*phid*xd*cos(phi) + 2*La^2*m*mb*phid*xd*cos(phi) + 2*Lb^2*m*mb*phid*xd*cos(phi) + 2*La^2*ma*mb*phid*xd*cos(phi) + 2*Lb^2*ma*mb*phid*xd*cos(phi) + (La*Lb*b*mb*xd*sin(2*alpha - phi))/2 + La*Lb*alphad*m^2*yd*sin(2*alpha + phi) + La*Lb*m^2*phid*yd*sin(2*alpha + phi) + La*Lb*mb^2*phid*yd*sin(2*alpha + phi) + 2*La^2*m*ma*phid*yd*sin(phi) + 2*La^2*m*mb*phid*yd*sin(phi) + 2*Lb^2*m*mb*phid*yd*sin(phi) + 2*La^2*ma*mb*phid*yd*sin(phi) + 2*Lb^2*ma*mb*phid*yd*sin(phi) + La^2*m*mb*phid*xd*cos(2*alpha + phi) + La^2*m*mb*phid*yd*sin(2*alpha + phi) + La*Lb*m*mb*phid*xd*cos(2*alpha - phi) - La*Lb*m*mb*phid*yd*sin(2*alpha - phi) + La^2*Lb*alphad*m*ma*phid*sin(2*alpha) + La^2*Lb*alphad*m*mb*phid*sin(2*alpha) + La*Lb*alphad*m*ma*xd*cos(phi) + La*Lb*alphad*m*mb*xd*cos(phi) + La*Lb*m*ma*phid*xd*cos(phi) + 3*La*Lb*m*mb*phid*xd*cos(phi) + 4*La*Lb*ma*mb*phid*xd*cos(phi) + La*Lb*alphad*m*ma*yd*sin(phi) + La*Lb*alphad*m*mb*yd*sin(phi) + La*Lb*m*ma*phid*yd*sin(phi) + 3*La*Lb*m*mb*phid*yd*sin(phi) + La*Lb*alphad*m*ma*xd*cos(2*alpha + phi) + La*Lb*alphad*m*mb*xd*cos(2*alpha + phi) + 4*La*Lb*ma*mb*phid*yd*sin(phi) + La*Lb*m*ma*phid*xd*cos(2*alpha + phi) + 2*La*Lb*m*mb*phid*xd*cos(2*alpha + phi) + La*Lb*alphad*m*ma*yd*sin(2*alpha + phi) + La*Lb*alphad*m*mb*yd*sin(2*alpha + phi) + La*Lb*m*ma*phid*yd*sin(2*alpha + phi) + 2*La*Lb*m*mb*phid*yd*sin(2*alpha + phi))/(I + Ib + La^2*m + 2*Lb^2*m + 2*La^2*ma + La^2*mb + 2*Lb^2*ma + Lb^2*mb - I*cos(2*alpha) - Ib*cos(2*alpha) + 2*La*Lb*m + 4*La*Lb*ma + 2*La*Lb*mb + La^2*m*cos(2*alpha) + La^2*mb*cos(2*alpha) + Lb^2*mb*cos(2*alpha) + 2*La*Lb*m*cos(2*alpha) + 2*La*Lb*mb*cos(2*alpha))
 
];
